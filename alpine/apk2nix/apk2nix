#!/usr/bin/env bash

ARCH=x86_64

# Default repo
ALPINE_REPO=http://dl-cdn.alpinelinux.org/alpine/v3.7/main

function help {
  echo "Usage: $0 [OPTION] PACKAGE...
Generates a Nix expression containing url and sha256 of apk packages from an Alpine Linux repository.

Options
  -o [OUT]      File to write Nix expression to
  -r [REPO]     Alpine Linux repository (defaults to $ALPINE_REPO)
  -h            display this help and exit
  "
}

function error {
  echo "Error: $1"
  exit 1
}

function get_closure {
  # Absolute paths to tools
  local PROOT=$(which proot)
  local APK_STATIC=$(which apk.static)

  # Helper to run commands in target system
  local apk_in_target="env -i PROOT_NO_SECCOMP=1 \
    $PROOT \
    -S $1 \
    -w / \
		-b $APK_STATIC:/sbin/apk.static \
    /sbin/apk.static
    "

  echo "Creating Alpine Linux System ... "
  $apk_in_target \
    -X $ALPINE_REPO \
    -U \
		--allow-untrusted \
    --initdb \
    add alpine-base || error "Failed to create Alpine Linux root file system"

  echo -n "Writing Nix expression to $out..."
  $apk_in_target \
    -X $ALPINE_REPO \
    fetch -R --simulate $2 | \
    while read -r dirty; do
      pkg=${dirty#Downloading }
      url=$ALPINE_REPO/$ARCH/$pkg.apk
      sha256=$(nix-prefetch-url $url 2>/dev/null)

      echo "
  { url = $url
  ; sha256 = \"$sha256\"; }" >> $out

    done

  echo "done"
}

# Parse arguments
unset out
while getopts "ho:" flag
do
  case $flag in
    o)
      out=$OPTARG
      ;;
    m)
      ALPINE_MIRROR=$OPTARG
      ;;
    h)
      help
      exit 0
      ;;
  esac
done

if [ -z "$out" ]
then
  help
  error "No output file provided. Use the -o option."
fi

PACKAGES="${@:$OPTIND}"

# Set up temp directory
tmp_root=$(mktemp -d)
function clean_up {
  rm -rf $tmp_root
}
trap "clean_up" EXIT


# Set up a base alpine system
echo "# This file was automatically generated by apk2nix on $(date)" > $out
echo "# Command: $0 $@" >> $out
echo "[" >> $out
get_closure $tmp_root "$PACKAGES"
echo "]" >> $out
