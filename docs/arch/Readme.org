#+TITLE: PlayOS

* Overview
  
A custom Linux system for running Dividat Play.

** Background

Dividat Play is a web-based application used in conjunction with the Dividat Senso hardware as a game-based training system.

Installations of Dividat Play and Dividat Senso usually receive a dedicated computer to run the software. PlayOS is a custom Linux system for such computers.

PlayOS is a custom [[https://nixos.org/][NixOS]] system that runs Dividat Play in a restricted kiosk environment. Installations can be upgraded atomically over-the-air. Deployed machines have two system partitions (A/B), each containing a complete system. PlayOS is compatible with NixOS modules and packages, everything that is available from upstream NixOS can be used.
  
** Build System

[[https://nixos.org/nix/][Nix]] is used as build system. Running ~nix build~ in the repository root will build all artifacts required to deploy system (via fresh installation or upgrade).

** Testing

<https://nixos.org/~eelco/talks/issre-nov-2010.pdf>
<https://nixos.org/nixos/manual/index.html#sec-nixos-tests>

* System
   
** Disk layout

A PlayOS installation has 4 partitions:

- EFI system partition (ESP): Contains bootloader and persistent system configuration data.
- Data partition: For persistent user data.
- System A partition
- System B partition

** Booting
   
PlayOS can only boot in UEFI mode. [[https://www.gnu.org/software/grub/][GNU Grub]] is used as bootloader.

The bootloader [[*Boot selection logic][chooses system to boot]] (A or B) based on persistent variables (GRUB environment variables on the EFI system partition). 

The bootloader boots the selected system by loading the kernel and initial ram disk, which must be placed on the system partition at ~/kernel~ and ~/initrd~. The bootloader passes the system partition as well as the [[*Update Mechanism][RAUC]] slot as kernel arguments (e.g. ~root=/dev/by-label/system.a rauc.slot=a~).

No further assumptions are made by the bootloader on how the system initializes.

** Init system

After low-level system is initialized from the initial ram disk (Stage 1) the ~/init~ script on the system partition (Stage 2) is run, which will start all necessary services to make system useable.

** Read-only system partition

To ensure integrity of system, the system partitions are mounted read-only. A temporary filesystem in volatile memory ([[https://www.kernel.org/doc/Documentation/filesystems/tmpfs.txt][tmpfs]]) is mounted used as root. The system partition is mounted in the ~/mnt/system~ directory. Files and directories that are required are bind mounted or symlinked to the correct location.

** Machine ID
   
Every machine is assigned a [[https://tools.ietf.org/html/rfc4122][Universal Unique IDentifier]] (machine-id) during installation. The machine-id is stored on the ~/boot~ partition and is persisted between [[*Update Mechanism][updates]] and [[*User data wiping][user data wiping]].

The machine-id is set on boot via the ~system.machine_id~ kernel argument and then [[https://www.freedesktop.org/software/systemd/man/machine-id.html][handled by the init system]].

** Update Mechanism

*** Boot selection logic

The [[*Booting][GRUB]] environment variables ~ORDER~, ~a_TRY~ and ~b_TRY~ are used to select system to boot. ~ORDER~ describes the order in which boots should be attempted (e.g. ~"a b"~). ~a_TRY~ and ~b_TRY~ describes the number of attempts to boot the respective systems. 

GRUB attempts to boot the first system in ~ORDER~ which has a value less than 3 in the respecitve ~TRY~ variable.

After installing a new system on slot ~x~, RAUC sets the ~ORDER~ to contain ~x~ as first element (see [[https://rauc.readthedocs.io/en/latest/reference.html#grub][here]]) and sets the number of tries to 0. On next boot GRUB attempts to boot system ~x~ for 3 times before falling back to the next system in ~ORDER~.

If system ~x~ boots successfully the [[*Mark system as good][system is marked as good]] and the ~x_TRY~ variable is set to ~0~.

If GRUB fails to boot all systems in ~ORDER~ three times, GRUB will stop attempting to boot and display a boot selection menu.

Note that the GRUB environment variables ~x_OK~ that are set by RAUC are not used in the system selection logic as RAUC sets ~x_OK=1~ when installing a new system even before the newly installed system has proven to be able to boot successfully (see [[https://rauc.readthedocs.io/en/latest/reference.html#grub][here]]).

*** TODO Setup proper signing keys

See <https://github.com/OpenVPN/easy-rsa/blob/v3.0.6/README.quickstart.md> and <https://rauc.readthedocs.io/en/latest/examples.html#pki-setup>.

*** TODO Make ~update-mechanism~ a nix module exposing options that are set in ~configuration.nix~
    
*** TODO develop update delivery mechanism

** Dividat Driver

** TODO Kiosk

** TODO Play Computer Controller (~pcc~)

*** TODO Mark system as good

Currently a systemd service is setup to mark the sytem as good. This should be done by the controller after making sure things are running ok.

*** TODO TFTP Server to accept RAUC bundles 
*** TODO User data wiping
*** TODO Network configuration
*** TODO Logging Mechanism

Important system events should be logged to ~log.dividat.com~.

* Installer

A bootable image is built that can be used to install systems. The installation is performed by a Python script (~install-playos.py~). It will automatically detect a suitable device to install the system to and ask for confirmation before partitioning, formatting and installing the system. Optionally the script can be used non-interactively.

Reasons for using Python include the [[https://github.com/dcantrell/pyparted][pyparted]] bindings to the [[https://www.gnu.org/software/parted/][GNU parted]] library for partitioning.

** TODO Use rauc bundle during installation

*** [2018-12-07 Fri] Initial experimentation

- Not compressing system tarball with xz increases size of rauc bundle from 180MB to 280MB (no X system).
- Rauc has [[https://rauc.readthedocs.io/en/latest/examples.html#write-slots-without-update-mechanics][write-slot]] option that can write an image to a slot. This still requires rauc to be properly configured on installation system (it needs to know about slots).
- Using Rauc nicely makes the installer script more complicated. Currently not worth the effort.
- Another idea: use rauc bundle but bypass rauc (bundle is just a squashfs image). However crypthographic verification of bundle is also bypassed.

** TODO Check for latest version of bundle over network
** TODO Check for already installed system and preserve [[*Machine ID][machine-id]]
