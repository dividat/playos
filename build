#!/usr/bin/env bash
set -euo pipefail

TARGET="${1:-default}"

scripts/info-branch-commit
export readonly TARGET=$(scripts/option-prompt "Select a target" vm develop validation master lab-key shed-key stuck default)
echo

# Allow unfree packages, required for zerotier using a BSL 1.1 licence
# See https://nixos.wiki/wiki/FAQ/How_can_I_install_a_proprietary_or_unfree_package%3F
export NIXPKGS_ALLOW_UNFREE=1

if [ "$TARGET" == "vm" ]; then

  (set -x; nix-build \
    --arg buildInstaller false \
    --arg buildBundle false \
    --arg buildLive false \
    --arg buildDisk false)

echo -e "
Run ./result/bin/run-in-vm to start a VM.

QEMU Shortcuts:
- Grab/release cursor: ctrl-alt-g
- Quit: ctrl-alt-q

PlayOS shortcuts:
- Toggle controller: ctrl-shift-f12

You can switch virtual consoles in the guest via QEMU monitor (ctrl-alt-2), sending a key combination via 'sendkey <key-comb>, and returning to QEMU display (ctrl-alt-1).
- Status console: ctrl-alt-f8
- Graphical system: ctrl-alt-f7
"

elif [ "$TARGET" == "develop" ]; then

  (set -x; nix-build \
    --arg updateCert ./pki/develop/cert.pem \
    --arg updateUrl https://dist.dividat.com/releases/playos/develop/ \
    --arg deployUrl s3://dist.dividat.ch/releases/playos/develop/ \
    --arg kioskUrl https://dev-play.dividat.com/ \
    --arg buildDisk false)

  echo
  echo "Run ./result/bin/deploy-update to deploy."

elif [ "$TARGET" == "validation" ]; then

  (set -x; nix-build \
    --arg updateCert ./pki/validation/cert.pem \
    --arg updateUrl https://dist.dividat.com/releases/playos/validation/ \
    --arg deployUrl s3://dist.dividat.ch/releases/playos/validation/ \
    --arg kioskUrl https://val-play.dividat.com/ \
    --arg buildDisk false)

  echo
  echo "Run ./result/bin/deploy-update to deploy."

elif [ "$TARGET" == "master" ]; then

  (set -x; nix-build \
    --arg updateCert ./pki/master/cert.pem \
    --arg updateUrl https://dist.dividat.com/releases/playos/master/ \
    --arg deployUrl s3://dist.dividat.ch/releases/playos/master/ \
    --arg kioskUrl https://play.dividat.com/ \
    --arg buildDisk false)

  echo
  echo "Run ./result/bin/deploy-update to deploy."

elif [ "$TARGET" == "stuck" ]; then

  echo "Creating a stuck system that will not self-update."
  echo

  printf "Kiosk URL? "
  read KIOSK_URL

  KIOSK_URL=$(echo "$KIOSK_URL" | xargs) # Trim

  (set -x; nix-build \
    --arg kioskUrl "$KIOSK_URL" \
    --arg buildBundle false \
    --arg buildDisk false)

elif [ "$TARGET" == "lab-key" ]; then

  (set -x; nix-build \
    --arg kioskUrl https://lab.dividat.com/ \
    --arg buildInstaller false \
    --arg buildBundle false \
    --arg buildDisk false)

elif [ "$TARGET" == "shed-key" ]; then

  (set -x; nix-build \
    --arg kioskUrl https://shed.dividat.com/ \
    --arg buildInstaller false \
    --arg buildBundle false \
    --arg buildDisk false)

else

  (set -x; nix-build)

fi
